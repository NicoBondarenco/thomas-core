name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '21'

jobs:
  validate:
    name: Validate Pull Request
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v2

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run build and tests
      run: ./gradlew clean build --no-daemon --parallel

    - name: Generate test coverage
      run: ./gradlew koverXmlReport --no-daemon

    - name: Add coverage comment to PR
      uses: madrapps/jacoco-report@v1.6.1
      with:
        paths: |
          ${{ github.workspace }}/build/reports/kover/report.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 95
        min-coverage-changed-files: 95
        title: Code Coverage Report
        update-comment: true

    - name: Quality Gate Check
      run: ./gradlew koverVerify --no-daemon

    - name: Check for breaking changes
      run: |
        if [[ "${{ github.event.pull_request.base.ref }}" == "main" ]]; then
          echo "Checking for breaking changes against main branch"
          # Add API compatibility checks here if needed
        fi

    - name: Comment PR with build status
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' && comment.body.includes('Build Status')
          );

          const success = '${{ job.status }}' === 'success';
          const body = `## Build Status: ${success ? '✅ Success' : '❌ Failed'}

          **Commit:** \`${{ github.event.pull_request.head.sha }}\`
          **Branch:** \`${{ github.event.pull_request.head.ref }}\`

          ${success ?
            '✅ All checks passed! This PR is ready for review.' :
            '❌ Some checks failed. Please review the build logs and fix the issues.'
          }`;

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

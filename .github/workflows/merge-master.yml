
name: Production Release Pipeline

on:
  pull_request:
    branches: ["master"]
    types: [closed]

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  Validate-Release:
    name: Validate Release Conditions
    runs-on:
      group: Default
    if: github.event.pull_request.merged == true
    
    outputs:
      release-version: ${{ steps.release-info.outputs.release-version }}
      is-hotfix: ${{ steps.release-info.outputs.is-hotfix }}
    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Extract Release Information
        id: release-info
        env:
          GH_TOKEN: ${{ secrets.GHP_TOKEN }}
          CUR_VERSION: ${{ vars.CURRENT_VERSION }}
        run: |
          # Extrair vers√£o atual do t√≠tulo da PR ou tags
          RELEASE_VERSION=$CUR_VERSION
          
          # Verificar se √© hotfix baseado na branch de origem
          IS_HOTFIX=${{ startsWith(github.event.pull_request.head.ref, 'hotfix') }}
                    
          echo "release-version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "is-hotfix=$IS_HOTFIX" >> $GITHUB_OUTPUT
          
          echo "üöÄ Preparando release v$RELEASE_VERSION"
          echo "üî• √â hotfix: $IS_HOTFIX"

  Pre-Production-Build:
    name: Pre-Production Build
    runs-on:
      group: Default
    needs: [Validate-Release]
    if: github.event.pull_request.merged == true
    
    permissions:
      contents: read

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build for PRODUCTION
        run: |
          ./gradlew clean build -x test --parallel --build-cache

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-production-${{ vars.CURRENT_VERSION }}
          path: |
            build/libs/
            build/distributions/
          retention-days: 7

  Security-Audit:
    name: Security Audit
    runs-on:
      group: Default
    needs: [Validate-Release]
    if: github.event.pull_request.merged == true
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run security audit
        run: |
          echo "üîí Executando auditoria de seguran√ßa..."
          
          # Dependency vulnerability check
          ./gradlew dependencyCheckAnalyze || echo "Dependency check not configured"
          
          # OWASP dependency check
          ./gradlew owaspDependencyCheck || echo "OWASP check not configured"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ vars.CURRENT_VERSION }}
          path: |
            build/reports/dependency-check/
            build/reports/owasp/
          retention-days: 7

  Quality-Gate:
    name: Production Quality Gate
    runs-on:
      group: Default
    needs: [Validate-Release, Pre-Production-Build]
    if: github.event.pull_request.merged == true
    
    permissions:
      contents: read
    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*-${{ vars.CURRENT_VERSION }}
          merge-multiple: true
          path: build/reports/

      - name: Generate coverage reports
        run: |
          ./gradlew koverVerify koverHtmlReport koverXmlReport

      - name: SonarQube Quality Gate
        env:
          THOMAS_CORE_SONAR_LOGIN: ${{ secrets.CORE_SONAR_LOGIN }}
          THOMAS_SONAR_URL: ${{ secrets.SONAR_URL }}
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
        run: ./gradlew sonar

  Publish-Release:
    name: Publish Release Artifacts
    runs-on:
      group: Default
    needs: [Validate-Release, Pre-Production-Build, Security-Audit, Quality-Gate]
    if: github.event.pull_request.merged == true
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Publish Release Artifacts
        env:
          CUR_VERSION: ${{ vars.CURRENT_VERSION }}
          ENVIRONMENT: PRODUCTION
          REPSY_USERNAME: ${{ secrets.REPSY_USERNAME }}
          REPSY_PASSWORD: ${{ secrets.REPSY_PASSWORD }}
        run: |
          ./gradlew publish --build-cache

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ vars.CURRENT_VERSION }}
          name: Release v${{ vars.CURRENT_VERSION }}
          body: |
            ## üéâ T.H.O.M.A.S. Core v${{ vars.CURRENT_VERSION }}
            
            ### üìã Informa√ß√µes da Release
            - **Vers√£o**: v${{ vars.CURRENT_VERSION }}
            - **Tipo**: ${{ needs.validate-release.outputs.is-hotfix == 'true' && 'üî• Hotfix' || '‚ú® Release' }}
            - **Data**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            ### üöÄ Deploy
            - ‚úÖ Staging: Conclu√≠do
            - ‚úÖ Produ√ß√£o: Conclu√≠do
            - ‚úÖ Health Checks: Passando
            
            ### üìä Qualidade
            - ‚úÖ Testes: Todos passando
            - ‚úÖ Cobertura: >95%
            - ‚úÖ Quality Gate: Aprovado
            - ‚úÖ Security Audit: Aprovado
                        
            ---

          draft: false
          prerelease: ${{ needs.validate-release.outputs.is-hotfix == 'true' }}
          files: |
            build/libs/*.jar
            build/distributions/*
          generate_release_notes: true

  Post-Release:
    name: Post-Release Actions
    runs-on:
      group: Default
    needs: [Validate-Release, Publish-Release]
    if: always() && github.event.pull_request.merged == true
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Sync master to develop
        run: |
          echo "üîÑ Sincronizando master com develop..."
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Fazer merge do master de volta para develop para manter sincronizado
          git fetch origin develop
          git checkout develop
          git merge master --no-ff -m "üîÑ Sync master v${{ vars.CURRENT_VERSION }} to develop"
          git push origin develop

  Notification:
    name: Release Notifications
    runs-on:
      group: Default
    needs: [Validate-Release, Publish-Release, Post-Release]
    if: always() && github.event.pull_request.merged == true
    
    steps:
      - name: Notify Success
        if: needs.publish-release.result == 'success'
        run: |
          echo "üéâ RELEASE CONCLU√çDA COM SUCESSO!"
          echo ""
          echo "üìã Detalhes:"
          echo "  ‚Ä¢ Vers√£o: v${{ vars.CURRENT_VERSION }}"
          echo "  ‚Ä¢ Ambiente: Produ√ß√£o"
          echo "  ‚Ä¢ Status: ‚úÖ Ativo"
          echo ""
          echo "üìä M√©tricas:"
          echo "  ‚Ä¢ Deploy Time: $(date -u)"
          echo "  ‚Ä¢ Pipeline: ${{ github.run_number }}"
          echo "  ‚Ä¢ Commit: ${{ github.sha }}"

      - name: Notify Failure
        if: failure()
        run: |
          echo "‚ùå FALHA NA RELEASE!"
          echo ""
          echo "üìã Detalhes:"
          echo "  ‚Ä¢ Vers√£o: v${{ vars.CURRENT_VERSION }}"
          echo "  ‚Ä¢ Status: ‚ùå Falhou"
          echo "  ‚Ä¢ Pipeline: ${{ github.run_number }}"
          echo ""
